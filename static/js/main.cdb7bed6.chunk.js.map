{"version":3,"sources":["components/input-component/InputComponent.jsx","components/Todos.jsx","components/TodoContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["InputComponent","stateContent","handleChange","handleAddClick","className","type","value","id","onChange","htmlFor","onClick","Todos","todos","handleDeleteClick","todoList","length","map","todo","style","transition","borderTop","key","content","href","TodoContainer","dummyTodos","App","props","bind","addTodo","deleteTodo","state","inputValue","e","this","setState","target","push","Math","floor","random","alert","event","todoId","parentNode","filter","Number","console","log","window","addEventListener","keyCode","marginTop","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6OAiBeA,MAdf,YAAuE,IAA9CC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,eACjD,OACI,yBAAKC,UAAU,eACX,2BAAOA,UAAU,mBAAmBC,KAAK,OAAOC,MAAOL,EAAcM,GAAG,OAAOC,SAAUN,IACzF,2BAAOO,QAAQ,OAAOL,UAAU,UAAhC,gCACA,yBAAKA,UAAU,eACX,4BAAQM,QAASP,EAAgBC,UAAU,uCAAsC,uBAAGA,UAAU,kBAAb,YCUlFO,MAjBf,YAA4C,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,kBAGbC,EAA4B,IAAjBF,EAAMG,OACvBH,EAAMI,KAAI,SAAAC,GAAI,OAAE,wBAAIC,MAAO,CAACC,WAAW,mBAAoBC,UAAU,mBAAoBC,IAAKJ,EAAKV,GAAIA,GAAIU,EAAKV,GAAIH,UAAU,mBAC9H,6BAAMa,EAAKK,QAAQ,uBAAGC,KAAK,KAAKb,QAASG,EAAmBT,UAAU,iCAAgC,uBAAGA,UAAU,kBAAb,eAG9F,wBAAIA,UAAU,0BAAd,qBAER,OACI,oCACCU,ICAMU,MAZf,YAAoD,IAA5BZ,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,kBAC3B,OACI,oCACA,wBAAIT,UAAU,oCAEd,wBAAIA,UAAU,4BAA2B,2CACzC,kBAAC,EAAD,CAAOQ,MAAOA,EAAOC,kBAAmBA,OCH5CY,EAAa,GAoEFC,E,kDAhEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDzB,aAAc,EAAKA,aAAa0B,KAAlB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAElB,EAAKG,MAAQ,CACXC,WAAW,GACXpB,MAAM,IATS,E,yDAcNqB,GACXC,KAAKC,SAAS,CACZH,WAAWC,EAAEG,OAAO9B,U,gCAOO,KAA1B4B,KAAKH,MAAMC,YAKZP,EAAWY,KAAK,CAAC9B,GAAG+B,KAAKC,MAAsB,IAAhBD,KAAKE,UAAiBlB,QAAQY,KAAKH,MAAMC,aACxEE,KAAKC,SAAS,CACZvB,MAAMa,EACNO,WAAW,MAPbS,MAAM,2B,iCAaCC,GAAO,IAAD,OACTC,EAASD,EAAMN,OAAOQ,WAAWA,WAAWA,WAAWrC,GAC7DkB,EAAaS,KAAKH,MAAMnB,MAAMiC,QAAO,SAAA5B,GAAI,OAAGA,EAAKV,KAAOuC,OAAOH,MAC/DT,KAAKC,SAAS,CACZvB,MAAMa,IACL,kBAAIsB,QAAQC,IAAI,EAAKjB,MAAMnB,Y,0CAGZ,IAAD,OACjBqC,OAAOC,iBAAiB,YAAY,SAACjB,GAClB,KAAdA,EAAEkB,SACH,EAAKtB,e,+BAOT,OACE,yBAAKzB,UAAU,YAAYc,MAAO,CAACkC,UAAU,SAC3C,kBAAC,EAAD,CAAgBlD,aAAcgC,KAAKhC,aAAcD,aAAciC,KAAKH,MAAMC,WAAY7B,eAAgB+B,KAAKL,UAC3G,kBAAC,EAAD,CAAejB,MAAOsB,KAAKH,MAAMnB,MAAOC,kBAAmBqB,KAAKJ,kB,GA3DtDuB,aCIEC,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.cdb7bed6.chunk.js","sourcesContent":["import React from 'react'\r\nimport './input-component.css'\r\n\r\nfunction InputComponent({stateContent, handleChange, handleAddClick}) {\r\n    return (\r\n        <div className=\"input-field\">\r\n            <input className=\"pulse white-text\" type=\"text\" value={stateContent} id=\"todo\" onChange={handleChange}/>\r\n            <label htmlFor=\"todo\" className=\"active\">{`type here to procastinate :)`}</label>\r\n            <div className=\"right-align\">\r\n                <button onClick={handleAddClick} className=\"btn-floating purple lighten-2 pulse\"><i className=\"material-icons\">done</i></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default InputComponent\r\n","import React from 'react'\r\n\r\nfunction Todos({todos, handleDeleteClick}) {\r\n    \r\n\r\n    const todoList = todos.length !== 0 ?\r\n    todos.map(todo=><li style={{transition:\"all 0.5s ease-in\", borderTop:\"1px solid black\"}} key={todo.id} id={todo.id} className=\"collection-item\">\r\n    <div>{todo.content}<a href=\"#!\" onClick={handleDeleteClick} className=\"secondary-content purple-text\"><i className=\"material-icons\">close</i>\r\n    </a>\r\n    </div>\r\n    </li>): <li className=\"collection-item center\">you have no todos</li>\r\n\r\n    return (\r\n        <>\r\n        {todoList}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todos\r\n","import React from 'react'\r\nimport Todos from './Todos'\r\nfunction TodoContainer({todos, handleDeleteClick}) {\r\n    return (\r\n        <> \r\n        <ul className=\"z-depth-5 collection with-header\">\r\n        \r\n        <li className=\"collection-header center\"><h5>Your Todos</h5></li>\r\n        <Todos todos={todos} handleDeleteClick={handleDeleteClick} />\r\n        </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoContainer\r\n","import React, { Component } from 'react'\nimport InputComponent from './components/input-component/InputComponent'\nimport TodoContainer from './components/TodoContainer'\n\n\nlet dummyTodos = []\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.handleChange= this.handleChange.bind(this)\n    this.addTodo = this.addTodo.bind(this)\n    this.deleteTodo = this.deleteTodo.bind(this)\n\n    this.state = {\n      inputValue:\"\",\n      todos:[],\n    }\n    \n  }\n\n  handleChange(e){\n    this.setState({\n      inputValue:e.target.value\n    })\n  }\n \n  \n  addTodo(){\n    \n    if(this.state.inputValue === \"\"){\n      alert(`please type in a todo`)\n      return\n    }\n    else{\n      dummyTodos.push({id:Math.floor(Math.random() * 2000),content:this.state.inputValue})\n      this.setState({\n        todos:dummyTodos,\n        inputValue:\"\"\n      })\n    }\n  }\n  \n\n  deleteTodo(event){\n    const todoId = event.target.parentNode.parentNode.parentNode.id;\n    dummyTodos = this.state.todos.filter(todo=> todo.id !== Number(todoId))\n    this.setState({\n      todos:dummyTodos\n    }, ()=>console.log(this.state.todos))\n  }\n\n  componentDidMount(){\n    window.addEventListener('keypress', (e)=>{\n      if(e.keyCode === 13){\n        this.addTodo()\n      }\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"container\" style={{marginTop:\"20vh\"}}>\n        <InputComponent handleChange={this.handleChange} stateContent={this.state.inputValue} handleAddClick={this.addTodo}/>\n        <TodoContainer todos={this.state.todos} handleDeleteClick={this.deleteTodo}/>\n        </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}